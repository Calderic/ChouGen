-- =====================================================
-- Â¢ûÈáèÊõ¥Êñ∞: Ê∑ªÂä†Áî®Êà∑Áä∂ÊÄÅÂíåÊàêÂ∞±Á≥ªÁªü (‰ºòÂåñÁâà)
-- ÂàõÂª∫Êó∂Èó¥: 2025-01-11
-- ËØ¥Êòé: Âú®Â∑≤Êúâ schema Âü∫Á°Ä‰∏äÊ∑ªÂä†Êñ∞ÂäüËÉΩ
-- ‰ºòÂåñ: Êõ¥ÂêàÁêÜÁöÑÊó∂Èó¥Âà§Êñ≠ + ÂÆöÊó∂‰ªªÂä°Ê£ÄÊü•ËøûÁª≠ËÆ∞ÂΩï
-- =====================================================

-- =====================================================
-- 1. ‰∏∫ profiles Ë°®Ê∑ªÂä†Áä∂ÊÄÅÂ≠óÊÆµ
-- =====================================================

ALTER TABLE profiles
ADD COLUMN IF NOT EXISTS status TEXT DEFAULT 'observing'
CHECK (status IN ('quitting', 'controlling', 'observing'));

COMMENT ON COLUMN profiles.status IS 'Áî®Êà∑Áä∂ÊÄÅ: quitting=ÊàíÁÉü‰∏≠, controlling=ÊéßÁÉü‰∏≠, observing=ËßÇÊúõ‰∏≠';

-- =====================================================
-- 2. ÂàõÂª∫ÊàêÂ∞±ÂÆö‰πâË°®
-- =====================================================

CREATE TABLE IF NOT EXISTS achievements (
  id TEXT PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT NOT NULL,
  icon TEXT,
  category TEXT NOT NULL CHECK (category IN ('milestone', 'streak', 'cost', 'quit', 'special')),
  requirement_type TEXT NOT NULL CHECK (requirement_type IN ('count', 'days', 'cost', 'special')),
  requirement_value INTEGER NOT NULL CHECK (requirement_value > 0),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

COMMENT ON TABLE achievements IS 'ÊàêÂ∞±ÂÆö‰πâË°®';
COMMENT ON COLUMN achievements.category IS 'ÊàêÂ∞±Á±ªÂà´: milestone=ÈáåÁ®ãÁ¢ë, streak=ËøûÁª≠, cost=Ê∂àË¥π, quit=ÊàíÁÉü, special=ÁâπÊÆä';

-- =====================================================
-- 3. ÂàõÂª∫Áî®Êà∑ÊàêÂ∞±ËÆ∞ÂΩïË°®
-- =====================================================

CREATE TABLE IF NOT EXISTS user_achievements (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  achievement_id TEXT NOT NULL REFERENCES achievements(id) ON DELETE CASCADE,
  unlocked_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  progress INTEGER DEFAULT 0,

  CONSTRAINT unique_user_achievement UNIQUE(user_id, achievement_id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

COMMENT ON TABLE user_achievements IS 'Áî®Êà∑Ëß£ÈîÅÁöÑÊàêÂ∞±ËÆ∞ÂΩïË°®';
COMMENT ON COLUMN user_achievements.progress IS 'ÂΩìÂâçËøõÂ∫¶(ÂèØÈÄâ,Áî®‰∫éÊòæÁ§∫ËøõÂ∫¶Êù°)';

-- Á¥¢Âºï
CREATE INDEX IF NOT EXISTS idx_user_achievements_user ON user_achievements(user_id);
CREATE INDEX IF NOT EXISTS idx_user_achievements_unlocked ON user_achievements(unlocked_at DESC);
CREATE INDEX IF NOT EXISTS idx_user_achievements_achievement ON user_achievements(achievement_id);

-- =====================================================
-- 4. ÊèíÂÖ•È¢ÑÂÆö‰πâÊàêÂ∞±Êï∞ÊçÆ
-- =====================================================

INSERT INTO achievements (id, name, description, icon, category, requirement_type, requirement_value) VALUES
  ('first_smoke', 'È¶ñÊ¨°ËÆ∞ÂΩï', 'ËÆ∞ÂΩïÁ¨¨‰∏ÄÊîØÁÉü', 'üö¨', 'milestone', 'count', 1),
  ('week_warrior', 'Âë®ÊàòÂ£´', 'ËøûÁª≠ËÆ∞ÂΩï7Â§©', 'üìÖ', 'streak', 'days', 7),
  ('month_master', 'ÊúàÂ∫¶Â§ßÂ∏à', 'ËøûÁª≠ËÆ∞ÂΩï30Â§©', 'üóìÔ∏è', 'streak', 'days', 30),
  ('hundred_club', 'ÁôæÁÉü‰ø±‰πêÈÉ®', 'Á¥ØËÆ°ËÆ∞ÂΩï100ÊîØÁÉü', 'üíØ', 'milestone', 'count', 100),
  ('cost_conscious', 'Ëä±Èí±Â¶ÇÊµÅÊ∞¥', 'ÊÄªËä±Ë¥πË∂ÖËøá1000ÂÖÉ', 'üí∞', 'cost', 'cost', 1000),
  ('speed_demon', 'Èó™ÁîµÊâã', 'ÂçïÊó•ËÆ∞ÂΩï10ÊîØ‰ª•‰∏ä', '‚ö°', 'special', 'count', 10),
  ('quit_attempt', 'ÊàíÁÉüÂÖàÈîã', 'ËøûÁª≠7Â§©Èõ∂ËÆ∞ÂΩï', 'üèÜ', 'quit', 'days', 7),
  ('quit_master', 'ÊàíÁÉüÂ§ßÂ∏à', 'ËøûÁª≠30Â§©Èõ∂ËÆ∞ÂΩï', 'üëë', 'quit', 'days', 30),
  ('early_bird', 'Êó©Ëµ∑È∏üÂÑø', 'ÂáåÊô®4ÁÇπ~8ÁÇπÂçäËÆ∞ÂΩï', 'üåÖ', 'special', 'special', 1),
  ('night_owl', 'Â§úÁå´Â≠ê', 'Êôö‰∏ä22ÁÇπ~ÂáåÊô®4ÁÇπËÆ∞ÂΩï', 'üåô', 'special', 'special', 1)
ON CONFLICT (id) DO NOTHING;

-- =====================================================
-- 5. RLS Á≠ñÁï•
-- =====================================================

ALTER TABLE achievements ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_achievements ENABLE ROW LEVEL SECURITY;

-- achievements Ë°®Á≠ñÁï•: ÊâÄÊúâ‰∫∫ÂèØÊü•Áúã
CREATE POLICY "Achievements are public"
ON achievements FOR SELECT
USING (true);

-- user_achievements Ë°®Á≠ñÁï•: Áî®Êà∑ÂèØÊü•ÁúãÊâÄÊúâ‰∫∫ÁöÑÊàêÂ∞±(Á§æ‰∫§Â±ïÁ§∫)
CREATE POLICY "Public achievements are viewable"
ON user_achievements FOR SELECT
USING (true);

-- user_achievements Ë°®Á≠ñÁï•: Âè™ËÉΩÈÄöËøáÁ≥ªÁªüÂàõÂª∫(Èò≤Ê≠¢‰ΩúÂºä)
CREATE POLICY "System can manage achievements"
ON user_achievements FOR INSERT
WITH CHECK (false);

CREATE POLICY "System can update achievements"
ON user_achievements FOR UPDATE
USING (false);

CREATE POLICY "System can delete achievements"
ON user_achievements FOR DELETE
USING (false);

-- =====================================================
-- 6. ÊàêÂ∞±Ëá™Âä®Ëß£ÈîÅÂáΩÊï∞
-- =====================================================

-- 6.1 Ê£ÄÊü•"È¶ñÊ¨°ËÆ∞ÂΩï"ÊàêÂ∞±
CREATE OR REPLACE FUNCTION check_first_smoke_achievement()
RETURNS TRIGGER AS $$
BEGIN
  IF (SELECT COUNT(*) FROM smoking_records WHERE user_id = NEW.user_id) = 1 THEN
    INSERT INTO user_achievements (user_id, achievement_id)
    VALUES (NEW.user_id, 'first_smoke')
    ON CONFLICT (user_id, achievement_id) DO NOTHING;
  END IF;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 6.2 Ê£ÄÊü•"ÁôæÁÉü‰ø±‰πêÈÉ®"ÊàêÂ∞±
CREATE OR REPLACE FUNCTION check_hundred_club_achievement()
RETURNS TRIGGER AS $$
BEGIN
  IF (SELECT COUNT(*) FROM smoking_records WHERE user_id = NEW.user_id) >= 100 THEN
    INSERT INTO user_achievements (user_id, achievement_id)
    VALUES (NEW.user_id, 'hundred_club')
    ON CONFLICT (user_id, achievement_id) DO NOTHING;
  END IF;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 6.3 Ê£ÄÊü•"Ëä±Èí±Â¶ÇÊµÅÊ∞¥"ÊàêÂ∞±
CREATE OR REPLACE FUNCTION check_cost_achievement()
RETURNS TRIGGER AS $$
DECLARE
  total_cost_value DECIMAL(10, 2);
BEGIN
  SELECT COALESCE(SUM(cost), 0) INTO total_cost_value
  FROM smoking_records
  WHERE user_id = NEW.user_id;

  IF total_cost_value >= 1000 THEN
    INSERT INTO user_achievements (user_id, achievement_id)
    VALUES (NEW.user_id, 'cost_conscious')
    ON CONFLICT (user_id, achievement_id) DO NOTHING;
  END IF;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 6.4 Ê£ÄÊü•"Èó™ÁîµÊâã"ÊàêÂ∞±(ÂçïÊó•10ÊîØ‰ª•‰∏ä)
CREATE OR REPLACE FUNCTION check_speed_demon_achievement()
RETURNS TRIGGER AS $$
DECLARE
  today_count INTEGER;
BEGIN
  SELECT COUNT(*) INTO today_count
  FROM smoking_records
  WHERE user_id = NEW.user_id
    AND DATE(smoked_at) = DATE(NEW.smoked_at);

  IF today_count >= 10 THEN
    INSERT INTO user_achievements (user_id, achievement_id)
    VALUES (NEW.user_id, 'speed_demon')
    ON CONFLICT (user_id, achievement_id) DO NOTHING;
  END IF;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 6.5 Ê£ÄÊü•"Êó©Ëµ∑È∏üÂÑø"ÊàêÂ∞±(ÂáåÊô®4ÁÇπ~8ÁÇπÂçä)
CREATE OR REPLACE FUNCTION check_early_bird_achievement()
RETURNS TRIGGER AS $$
DECLARE
  smoke_hour INTEGER;
  smoke_minute INTEGER;
BEGIN
  smoke_hour := EXTRACT(HOUR FROM NEW.smoked_at);
  smoke_minute := EXTRACT(MINUTE FROM NEW.smoked_at);

  -- 4:00~8:30 ‰πãÈó¥
  IF (smoke_hour = 4 OR smoke_hour = 5 OR smoke_hour = 6 OR smoke_hour = 7) OR
     (smoke_hour = 8 AND smoke_minute <= 30) THEN
    INSERT INTO user_achievements (user_id, achievement_id)
    VALUES (NEW.user_id, 'early_bird')
    ON CONFLICT (user_id, achievement_id) DO NOTHING;
  END IF;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

COMMENT ON FUNCTION check_early_bird_achievement IS 'Ê£ÄÊü•Êó©Ëµ∑È∏üÂÑøÊàêÂ∞±: ÂáåÊô®4:00~8:30';

-- 6.6 Ê£ÄÊü•"Â§úÁå´Â≠ê"ÊàêÂ∞±(Êôö‰∏ä22ÁÇπ~ÂáåÊô®4ÁÇπ)
CREATE OR REPLACE FUNCTION check_night_owl_achievement()
RETURNS TRIGGER AS $$
DECLARE
  smoke_hour INTEGER;
BEGIN
  smoke_hour := EXTRACT(HOUR FROM NEW.smoked_at);

  -- 22:00~23:59 Êàñ 0:00~3:59
  IF smoke_hour >= 22 OR smoke_hour < 4 THEN
    INSERT INTO user_achievements (user_id, achievement_id)
    VALUES (NEW.user_id, 'night_owl')
    ON CONFLICT (user_id, achievement_id) DO NOTHING;
  END IF;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

COMMENT ON FUNCTION check_night_owl_achievement IS 'Ê£ÄÊü•Â§úÁå´Â≠êÊàêÂ∞±: Êôö‰∏ä22:00~ÂáåÊô®4:00';

-- =====================================================
-- 7. ÂÆöÊó∂‰ªªÂä°: Ê£ÄÊü•ËøûÁª≠ËÆ∞ÂΩïÊàêÂ∞±
-- =====================================================

-- 7.1 Ê£ÄÊü•ËøûÁª≠ËÆ∞ÂΩïÊàêÂ∞±(Âë®ÊàòÂ£´„ÄÅÊúàÂ∫¶Â§ßÂ∏à)
CREATE OR REPLACE FUNCTION check_streak_achievements()
RETURNS void AS $$
DECLARE
  user_record RECORD;
  consecutive_days INTEGER;
  last_record_date DATE;
  current_date DATE := CURRENT_DATE;
BEGIN
  -- ÈÅçÂéÜÊâÄÊúâÁî®Êà∑
  FOR user_record IN
    SELECT DISTINCT user_id FROM smoking_records
  LOOP
    -- ËÆ°ÁÆóËøûÁª≠ËÆ∞ÂΩïÂ§©Êï∞
    WITH RECURSIVE date_series AS (
      -- Ëé∑ÂèñÁî®Êà∑ÊúÄÂêé‰∏ÄÊ¨°ËÆ∞ÂΩïÁöÑÊó•Êúü
      SELECT
        DATE(MAX(smoked_at)) AS check_date,
        0 AS days_back
      FROM smoking_records
      WHERE user_id = user_record.user_id

      UNION ALL

      -- ÈÄíÂΩíÊ£ÄÊü•Ââç‰∏ÄÂ§©
      SELECT
        check_date - INTERVAL '1 day',
        days_back + 1
      FROM date_series
      WHERE days_back < 365
        AND EXISTS (
          SELECT 1 FROM smoking_records
          WHERE user_id = user_record.user_id
            AND DATE(smoked_at) = check_date - INTERVAL '1 day'
        )
    )
    SELECT COUNT(*) INTO consecutive_days
    FROM date_series;

    -- Ëß£ÈîÅ"Âë®ÊàòÂ£´"ÊàêÂ∞±(ËøûÁª≠7Â§©)
    IF consecutive_days >= 7 THEN
      INSERT INTO user_achievements (user_id, achievement_id)
      VALUES (user_record.user_id, 'week_warrior')
      ON CONFLICT (user_id, achievement_id) DO NOTHING;
    END IF;

    -- Ëß£ÈîÅ"ÊúàÂ∫¶Â§ßÂ∏à"ÊàêÂ∞±(ËøûÁª≠30Â§©)
    IF consecutive_days >= 30 THEN
      INSERT INTO user_achievements (user_id, achievement_id)
      VALUES (user_record.user_id, 'month_master')
      ON CONFLICT (user_id, achievement_id) DO NOTHING;
    END IF;
  END LOOP;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

COMMENT ON FUNCTION check_streak_achievements IS 'ÂÆöÊó∂‰ªªÂä°: Ê£ÄÊü•ËøûÁª≠ËÆ∞ÂΩïÊàêÂ∞±(Âª∫ËÆÆÊØèÂ§©ËøêË°å)';

-- 7.2 Ê£ÄÊü•ÊàíÁÉüÊàêÂ∞±(ÊàíÁÉüÂÖàÈîã„ÄÅÊàíÁÉüÂ§ßÂ∏à)
CREATE OR REPLACE FUNCTION check_quit_achievements()
RETURNS void AS $$
DECLARE
  user_record RECORD;
  days_without_smoke INTEGER;
  last_smoke_date DATE;
  current_date DATE := CURRENT_DATE;
BEGIN
  -- ÈÅçÂéÜÊâÄÊúâÁî®Êà∑
  FOR user_record IN
    SELECT DISTINCT user_id FROM smoking_records
  LOOP
    -- Ëé∑ÂèñÊúÄÂêé‰∏ÄÊ¨°ÊäΩÁÉüÊó•Êúü
    SELECT DATE(MAX(smoked_at)) INTO last_smoke_date
    FROM smoking_records
    WHERE user_id = user_record.user_id;

    -- ËÆ°ÁÆóË∑ù‰ªäÂ§©Êï∞
    days_without_smoke := current_date - last_smoke_date;

    -- Ëß£ÈîÅ"ÊàíÁÉüÂÖàÈîã"ÊàêÂ∞±(ËøûÁª≠7Â§©Èõ∂ËÆ∞ÂΩï)
    IF days_without_smoke >= 7 THEN
      INSERT INTO user_achievements (user_id, achievement_id)
      VALUES (user_record.user_id, 'quit_attempt')
      ON CONFLICT (user_id, achievement_id) DO NOTHING;
    END IF;

    -- Ëß£ÈîÅ"ÊàíÁÉüÂ§ßÂ∏à"ÊàêÂ∞±(ËøûÁª≠30Â§©Èõ∂ËÆ∞ÂΩï)
    IF days_without_smoke >= 30 THEN
      INSERT INTO user_achievements (user_id, achievement_id)
      VALUES (user_record.user_id, 'quit_master')
      ON CONFLICT (user_id, achievement_id) DO NOTHING;
    END IF;
  END LOOP;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

COMMENT ON FUNCTION check_quit_achievements IS 'ÂÆöÊó∂‰ªªÂä°: Ê£ÄÊü•ÊàíÁÉüÊàêÂ∞±(Âª∫ËÆÆÊØèÂ§©ËøêË°å)';

-- =====================================================
-- 8. Ëß¶ÂèëÂô®: Ëá™Âä®Ê£ÄÊü•Âç≥Êó∂ÊàêÂ∞±
-- =====================================================

CREATE OR REPLACE TRIGGER check_achievements_on_smoke
AFTER INSERT ON smoking_records
FOR EACH ROW
EXECUTE FUNCTION check_first_smoke_achievement();

CREATE OR REPLACE TRIGGER check_hundred_club_on_smoke
AFTER INSERT ON smoking_records
FOR EACH ROW
EXECUTE FUNCTION check_hundred_club_achievement();

CREATE OR REPLACE TRIGGER check_cost_on_smoke
AFTER INSERT ON smoking_records
FOR EACH ROW
EXECUTE FUNCTION check_cost_achievement();

CREATE OR REPLACE TRIGGER check_speed_demon_on_smoke
AFTER INSERT ON smoking_records
FOR EACH ROW
EXECUTE FUNCTION check_speed_demon_achievement();

CREATE OR REPLACE TRIGGER check_early_bird_on_smoke
AFTER INSERT ON smoking_records
FOR EACH ROW
EXECUTE FUNCTION check_early_bird_achievement();

CREATE OR REPLACE TRIGGER check_night_owl_on_smoke
AFTER INSERT ON smoking_records
FOR EACH ROW
EXECUTE FUNCTION check_night_owl_achievement();

-- =====================================================
-- 9. ËæÖÂä©ÂáΩÊï∞: Ëé∑ÂèñÁî®Êà∑ÊàêÂ∞±(Â∏¶ËøõÂ∫¶)
-- =====================================================

CREATE OR REPLACE FUNCTION get_user_achievements_with_progress(target_user_id UUID)
RETURNS TABLE (
  achievement_id TEXT,
  name TEXT,
  description TEXT,
  icon TEXT,
  category TEXT,
  unlocked BOOLEAN,
  unlocked_at TIMESTAMP WITH TIME ZONE,
  progress INTEGER,
  requirement_value INTEGER
) AS $$
BEGIN
  RETURN QUERY
  SELECT
    a.id AS achievement_id,
    a.name,
    a.description,
    a.icon,
    a.category,
    (ua.id IS NOT NULL) AS unlocked,
    ua.unlocked_at,
    COALESCE(ua.progress, 0) AS progress,
    a.requirement_value
  FROM achievements a
  LEFT JOIN user_achievements ua
    ON a.id = ua.achievement_id AND ua.user_id = target_user_id
  ORDER BY
    CASE WHEN ua.id IS NOT NULL THEN 0 ELSE 1 END,
    ua.unlocked_at DESC,
    a.category,
    a.id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

COMMENT ON FUNCTION get_user_achievements_with_progress IS 'Ëé∑ÂèñÁî®Êà∑ÊâÄÊúâÊàêÂ∞±ÂèäËß£ÈîÅÁä∂ÊÄÅ';

-- =====================================================
-- 10. ÂàõÂª∫ÂÆöÊó∂‰ªªÂä°Ë∞ÉÂ∫¶(‰ΩøÁî® pg_cron Êâ©Â±ï)
-- =====================================================

-- Ê≥®ÊÑè: ÈúÄË¶ÅÂú® Supabase Dashboard ‰∏≠ÂêØÁî® pg_cron Êâ©Â±ï
-- ÂêØÁî®ÊñπÂºè: Database > Extensions > ÊêúÁ¥¢ pg_cron > ÂêØÁî®

-- ÂàõÂª∫Êâ©Â±ï(Â¶ÇÊûúÊú™ÂêØÁî®)
CREATE EXTENSION IF NOT EXISTS pg_cron;

-- ÊØèÂ§©ÂáåÊô® 1 ÁÇπÊ£ÄÊü•ËøûÁª≠ËÆ∞ÂΩïÊàêÂ∞±
SELECT cron.schedule(
  'check-streak-achievements',
  '0 1 * * *',
  'SELECT check_streak_achievements();'
);

-- ÊØèÂ§©ÂáåÊô® 2 ÁÇπÊ£ÄÊü•ÊàíÁÉüÊàêÂ∞±
SELECT cron.schedule(
  'check-quit-achievements',
  '0 2 * * *',
  'SELECT check_quit_achievements();'
);

COMMENT ON EXTENSION pg_cron IS 'ÂÆöÊó∂‰ªªÂä°Ë∞ÉÂ∫¶Êâ©Â±ï';

-- =====================================================
-- ÂÆåÊàê! Â¢ûÈáèÊõ¥Êñ∞ÊâßË°åÂÆåÊØï
-- =====================================================

-- È™åËØÅÊñ∞Ë°®
SELECT 'achievements Ë°®' AS table_name, COUNT(*) AS row_count FROM achievements
UNION ALL
SELECT 'user_achievements Ë°®' AS table_name, COUNT(*) AS row_count FROM user_achievements;

-- È™åËØÅÊñ∞Â≠óÊÆµ
SELECT column_name, data_type, column_default
FROM information_schema.columns
WHERE table_name = 'profiles' AND column_name = 'status';

-- È™åËØÅÂÆöÊó∂‰ªªÂä°
SELECT jobname, schedule, command
FROM cron.job
WHERE jobname LIKE '%achievement%';
